GMT4脚本风格指南
################

:date: 2014-05-13 13:00
:author: SeisMan
:catogory: GMT4
:tags: 风格
:slug: gmt4-style-guide

这篇博文会介绍写GMT脚本时需要遵循的一些风格与习惯。本文的目的是，希望遵循本风格指南的GMT脚本能够更易读、易改、更健壮、可移植性更高。

.. contents::

使用脚本来执行GMT命令
=====================

GMT遵循了UNIX的设计思想，将不同的功能分别放在不同的命令中，因而在绘图时需要执行一系列命令。将所有的绘图命令放在脚本中可以很方便地重复执行一系列命令，以对绘图的细节进行微调。

除非是一两个命令就可以解决的图，否则一律使用脚本而非命令行。使用什么脚本语言完全依赖于用户个人的需求与喜好，这里以Bash脚本为例。

.. code-block:: bash
   
   #!/bin/bash

   psxy ...
   pscoast ...
   grdraster ...
   grdimage ...
   psxy ...

使用变量
========

脚本不仅仅只是将一堆命令放在一个文件而已。绘图时有很多需要在多个命令中重复使用的东西，比如设置投影方式的\ ``-J``\ 、设置绘图范围的\ ``-R``\ 、文件名\ ``xxx.ps``\ 。

关于如何使用变量，一般有两种定义方式，这两种方法各有利弊，尚待权衡：

#. 将参数作为变量的值

   .. code-block:: bash

      #!/bin/bash
      J=M6i
      R=0/360/-60/60
      B=60/30
      PS=map.ps
    
      pscoast -J$J -R$R -B$B -W1p -A1000 -K > $PS
      psxy -J -R -Sa0.5c -Gred -O >> $PS << EOF
      160 20
      150 30
      EOF

#. 将选项和参数作为变量的值

   .. code-block:: bash

      #!/bin/bash
      J=-JM6i
      R=-R0/360/-60/60
      B=-B60/30
      PS=map.ps
    
      pscoast $J $R $B -W1p -A1000 -K > $PS
      psxy -J -R -Sa0.5c -Gred -O >> $PS << EOF
      160 20
      150 30
      EOF



不要省略参数
============

GMT的一个特性是后面的命令可以继承前面命令的一些参数，比如前面的命令中指定了\ ``-JM10c -R0/360/-60/60``\ ，后面的命令可以直接使用\ ``-J -R``\ 而不用重复给出更多的参数。这样的设计减少了用户的键入。

但使用GMT绘图时经常需要修改、增添命令或调整各个命令之间的顺序。在省略了部分参数的情况下，调整各个命令之间的顺序就变成一个必须要小心的动作了，有时会造成意想不到的错误。因而要尽量避免。

相同的参数在多个命令里要写很多遍，这样也很烦，这就更需要使用变量啦。

.. code-block:: bash

    #!/bin/bash
    J=M6i
    R=0/360/-60/60
    B=60/30
    PS=map.ps
    
    pscoast -J$J -R$R -B$B -W1p -A1000 -K > $PS
    psxy -J$J -R$R -Sa0.5c -Gred -O >> $PS << EOF
    160 20
    150 30
    EOF

开始与结束
==========

多个绘图命令会将PS代码依次写入到一个PS文件中。不同的顺序可能会有不同的效果。

在\ `GMT使用-K和-O的技巧 <{filename}/GMT/2013-07-07_how-to-use-gmt-ko.rst>`_\ 中已经具体提到如何正确使用\ ``-K``\ 和\ ``-O``\ 选项。

.. code-block:: bash

    #!/bin/bash
    J=M6i
    R=0/360/-60/60
    B=60/30
    PS=map.ps
    
    psxy -J$J -R$R -T -K > $PS
    pscoast -J$J -R$R -B$B -W1p -A1000 -K -O >> $PS
    psxy -J$J -R$R -T -O >> $PS

使用专门的两个命令来开始和结束一个PS绘图，这样做的好处在于：中间的所有绘图命令都使用\ ``-K -O >>``\ ，不必再考虑这个命令是第一个还是最后一个了，也可以随意删除或修改任何一个命令而不必担心造成其它效果。

使用SI单位制
============

GMT支持SI单位制和US单位制，默认是SI单位制。由于GMT的开发者是美国人，官方的文档使用的是US单位制，因而国内的GMT用户在学习的过程中也就习惯性地使用了US单位制。

实际上，国内用户对于US单位制没有太多的概念，\ ``-X1i``\ 远远没有\ ``-X2.5c``\ 直观。SI单位制是国际标准单位，也是中国人熟悉的单位，使用SI单位制会使得微调更简单。

不要依赖于GMT的系统设置
=======================

你所写的每一个脚本，将来都可能传给后来人使用，可能在任一台机器上使用。要保证脚本每次运行的结果完全一致，并不是一个简单的事情。

不要修改GMT系统设置
-------------------

有些人喜欢使用特定字体，或者喜欢使用特定尺寸的纸张，这可以通过修改\ ``$GMTHOME/share/conf``\ 下的一堆系统配置文件来实现。但是，不要这样做，这会导致脚本在别人的机器上跑出来完全不一样的结果。

不要省略单位
------------

当使用\ ``-JM10``\ 时，GMT会默认使用当前的系统默认单位（一般来说是\ ``c``\ ，也就是厘米），当脚本在另一台系统默认单位为\ ``i``\ 的机器上运行时，绘图的结果会完全不同。

default文件的使用
-----------------

不要手动修改default文件！

GMT中提供了\ ``gmtset``\ 命令可以用于修改缺省参数，比如标题的字体、大小等等。该命令会在当前工作目录下生成一个\ ``.gmtdefaults4``\ 文件，既然影响到接下来绘图命令的执行效果。

合理的使用方式如下：

.. code-block:: bash

   #!/bin/bash

   gmtset BASEMAP_TYPE plain
   psxy ...
   pscoast ...
   psxy ...
   rm .gmt*

在脚本的最后\ ``rm .gmt*``\ 至少删除了两个临时文件，一个是\ ``.gmtcommands``\ ，其记录了通用选项的一些信息，另一个是\ ``.gmtdefaults4``\ ，记录了当前的缺省参数。

删除这些文件的原因在于：

- 临时文件，应该删除。
- 脚本已经执行完毕，不应该遗留下无用的文件。
- 保留\ ``.gmtdefaults4``\ 文件，可能会导致下次执行脚本时产生不同的效果。例如，脚本中首先了默认字体0，然后绘制了一部分图，再使用\ ``gmtset``\ 修改字体为字体1，又绘制了一部分图，若忘记删除\ ``.gmtdefaults4``\ 文件，会导致下次执行脚本时，默认字体变成0，因而出现不同的绘图效果。

有这样一种可怕的情况：假如你在\ ``$HOME``\ 下执行了\ ``gmtset``\ 命令，然后画了一个简单的图，但是却忘记删除\ ``$HOME``\ 下生成的\ ``.gmtdefaults4``\ 文件，这会影响到其它目录中几乎所有GMT脚本的执行效果，而且这个问题很难排查。要避免这种情况的发生需要遵循几个原则：

#. 尽量不要在\ ``$HOME``\ 下执行GMT命令（可能会产生临时文件，难以清理）
#. 尽量不要使用命令行执行GMT命令（因为你很可能会忘记你刚刚执行过哪些命令）
#. 使用\ ``gmtset``\ 的脚本，最后一定要记得删除\ ``.gmtdefaults4``\

-P选项的使用
============

在《GMT进阶之-P选项》中已经说过，只有第一个绘图命令中的\ ``-P``\ 选项是起作用的，所以不要在每个绘图命令里都使用\ ``-P``\ 选项。

两种推荐的使用方式：

#. 在开始PS文件时使用该选项：

   .. code-block:: bash

      #!/bin/bash
      J=M20c
      R=0/360/-60/60
      B=60/30
      PS=map.ps
    
      psxy -J$J -R$R -T -K -P > $PS
      pscoast -J$J -R$R -B$B -W1p -A1000 -K -O >> $PS
      psxy -J$J -R$R -T -O >> $PS

#. 修改\ ``PAGE_ORIENTATION``\ ，不使用\ ``-P``\ 选项

   .. code-block:: bash

      #!/bin/bash
      J=M20c
      R=0/360/-60/60
      B=60/30
      PS=map.ps
    
      gmtset PAGE_ORIENTATION portrait  
      psxy -J$J -R$R -T -K > $PS
      pscoast -J$J -R$R -B$B -W1p -A1000 -K -O >> $PS
      psxy -J$J -R$R -T -O >> $PS
      rm .gmt*

不要滥用-B选项
==============

\ ``-B``\ 选项用于绘制边框并控制边框的绘制效果。即每个使用\ ``-B``\ 选项的命令都会绘制一次边框，在没有使用\ ``-X``\ 和\ ``-Y``\ 的情况下，多个命令重复使用\ ``-B``\ 选项会绘制多次边框，但由于边框是重合的，所以会看不出来区别。

对于\ ``-B``\ 选项，合理的用法是仅在第一个命令中使用。


verbose模式
===========

GMT命令的输出信息常用于在写脚本时判断命令执行是否正确，而在真正执行时过多的输出信息反而会扰乱用户的屏幕输出。合理的使用verbose模式的方式有三种：

#. 写脚本时每个命令都加上\ ``-V``\ 选项，待确认脚本正确无误之后删除所有\ ``-V``\ 。
#. 定义Verbose变量

   .. code-block:: bash

      #!/bin/bash

      J=M20c
      R=0/360/-60/60
      B=60/30
      PS=map.ps
      V=-V      # 调试时用这个
      #V=       # 调试完成用这个
    
      psxy -J$J -R$R -T -K -P $V > $PS
      pscoast -J$J -R$R -B$B -W1p -A1000 -K -O $V >> $PS
      psxy -J$J -R$R -T -O $V >> $PS

#. 修改缺省参数

   .. code-block:: bash

      #!/bin/bash
      J=M20c
      R=0/360/-60/60
      B=60/30
      PS=map.ps
      
      gmtset VERBOSE TRUE
      psxy -J$J -R$R -T -K $V > $PS
      pscoast -J$J -R$R -B$B -W1p -A1000 -K -O $V >> $PS
      psxy -J$J -R$R -T -O $V >> $PS
      rm .gmt*

慎用-X和-Y
==========

使用这两个选项会导致坐标原点的移动。因而，除了极个别的情况外，\ ``-X``\ 和\ ``-Y``\ 选项应该仅在绘制组合图（即一张图多个子图）时使用。

不要仅仅为了将某个符号或文字移动到某个位置就使用这两个选项，这可能会在后面带来众多不便。

